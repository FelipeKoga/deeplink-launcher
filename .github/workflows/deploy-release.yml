name: Deploy Release

on:
  workflow_dispatch:
    inputs:
      tagname:
        description: 'Version name'
        required: true
        default: 'v1.0.0'
        type: string

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ github.event.inputs.tagname }}',
              sha: context.sha
            })

  build-apk:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: >
            ${{ runner.os }}-gradle-
            ${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Update dependencies
        run: ./gradlew dependencies

      - name: Decode Release Key
        run: |
          echo "${{ secrets.KEYSTORE_DECRYPT_SECRET }}" > ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc &&
          echo "Decrypting file: ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc" &&
          echo "Output file will be: ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}" &&
          gpg --batch --yes --decrypt --passphrase "${{ secrets.KEYSTORE_DECRYPT_PASSWORD }}" ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc > ./androidApp/${{ vars.KEYSTORE_FILE_NAME }} &&
          rm ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc
        continue-on-error: false

      - name: Check Release Key is created
        run: |
          if [ -f ./androidApp/${{ vars.KEYSTORE_FILE_NAME }} ]; then
          echo "Release key exists."
          else
          echo "Release key does not exist." >&2
          exit 1
          fi
        continue-on-error: false

      - name: Build APK
        run: ./gradlew assembleRelease --stacktrace

      - name: Check if APK exists
        run: |
          if [ -f ./androidApp/build/outputs/apk/release/*.apk ]; then
          echo "APK exists."
          else
          echo "APK does not exist." >&2
          exit 1
          fi

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            ./androidApp/build/outputs/apk/release/*.apk

  build-deb:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      - name: Build DEB
        run: ./gradlew :desktopApp:packageDeb

      - name: Upload DEB
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-ubuntu-deb
          path: |
            ./desktopApp/build/compose/binaries/main/deb

  build-exe:
    needs: create-tag
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: ./gradlew.bat

      - name: Build EXE
        run: ./gradlew.bat :desktopApp:packageExe

      - name: Upload EXE
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-windows-exe
          path: |
            ./desktopApp/build/compose/binaries/main/exe/*.exe

  create-release:
    needs: [build-apk, build-deb, build-exe]
    runs-on: ubuntu-latest
    steps:
      - name: Download desktop windows exe artifact
        uses: actions/download-artifact@v2
        with:
          name: desktop-windows-exe

      - name: Download desktop ubuntu deb artifact
        uses: actions/download-artifact@v2
        with:
          name: desktop-ubuntu-deb

      - name: Download android APK artifact
        uses: actions/download-artifact@v2
        with:
          name: android-apk

      - name: Test artifact download
        run: ls -R

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.event.inputs.tagname }}
          release_name: Release ${{ github.event.inputs.tagname }}
          files: |
            ./desktopApp/build/compose/binaries/main/exe/*.exe
            ./desktopApp/build/compose/binaries/main/deb/*.deb
            ./androidApp/build/outputs/apk/release/*.apk
          token: ${{ secrets.GITHUB_TOKEN }}