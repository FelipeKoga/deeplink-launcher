name: Deploy Release

on:
  workflow_dispatch:
    inputs:
      tagname:
        description: 'Version name'
        required: true
        default: 'v1.0.0'
        type: string

jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ github.event.inputs.tagname }}',
              sha: context.sha
            })

  build-android:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: >
            ${{ runner.os }}-gradle-
            ${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Update dependencies
        run: ./gradlew dependencies

      - name: Decode Release Key
        run: |
          echo "${{ secrets.KEYSTORE_DECRYPT_SECRET }}" > ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc &&
          echo "Decrypting file: ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc" &&
          echo "Output file will be: ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}" &&
          gpg --batch --yes --decrypt --passphrase "${{ secrets.KEYSTORE_DECRYPT_PASSWORD }}" ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc > ./androidApp/${{ vars.KEYSTORE_FILE_NAME }} &&
          rm ./androidApp/${{ vars.KEYSTORE_FILE_NAME }}.asc
        continue-on-error: false

      - name: Check Release Key is created
        run: |
          if [ -f ./androidApp/${{ vars.KEYSTORE_FILE_NAME }} ]; then
          echo "Release key exists."
          else
          echo "Release key does not exist." >&2
          exit 1
          fi
        continue-on-error: false

      - name: Build APK
        run: ./gradlew assembleRelease --stacktrace

      - name: Check if APK exists
        run: |
          if [ -f ./androidApp/build/outputs/apk/release/*.apk ]; then
          echo "APK exists."
          else
          echo "APK does not exist." >&2
          exit 1
          fi

      - name: GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ github.event.inputs.tagname }}"
          prerelease: false
          files: |
            ./androidApp/build/outputs/apk/release/*.apk

  build-windows:
    needs: create-tag
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: ./gradlew.bat

      - name: Build EXE
        run: ./gradlew.bat packageExe

      - name: GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ github.event.inputs.tagname }}"
          prerelease: false
          files: |
            ./desktopApp/compose/binaries/main/exe/*.exe